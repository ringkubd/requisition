import AppLayout from '@/components/Layouts/AppLayout'
import Head from 'next/head'
import { useEffect, useState } from "react";
import { Card } from "flowbite-react";
import DataTable from "react-data-table-component";
import Status from "@/components/requisition/status";
import { useGetDashboardDataQuery } from "@/store/service/dashboard";
import { useAuth } from "@/hooks/auth";

const Dashboard = () => {
    const { user } = useAuth()
    const [initialColumns, setInitialColumns] = useState([]);
    const [searchParams, setSearchParams] = useState({});
    const {data, isLoading, isError, isSuccess} = useGetDashboardDataQuery(searchParams);
    const isDepartmentHead = user?.current_department_head === parseInt(user?.id);

    useEffect(() => {
        if (isSuccess && data){
            setInitialColumns([
                {
                    name: 'Sl',
                    selector: (row, sl) => sl + 1,
                    sortable: true,
                },
                {
                    name: 'I.R. NO.',
                    selector: row => row.irf_no,
                    sortable: true,
                },
                {
                    name: 'P.R. NO.',
                    selector: row => row.purchase_requisitions?.prf_no,
                    sortable: true,
                },
                {
                    name: 'Total Req. Unit',
                    selector: row => row.total_required_unit,
                    sortable: true,
                },
                {
                    name: 'Department',
                    selector: row => row.department?.name,
                    sortable: true,
                },
                {
                    name: 'Estimated Cost',
                    selector: row => parseFloat(row.purchase_requisitions?.estimated_total_amount ?? 0).toLocaleString('bd'),
                    sortable: true,
                },
                {
                    name: 'Generated By',
                    selector: row => row.user?.name,
                    sortable: true,
                },
                {
                    name: 'Created at',
                    selector: row => row.created_at,
                    sortable: true,
                },
                {
                    name: 'Initial',
                    selector: row => <Status key={row.id} requisition={row} type={'initial'} />,
                    omit: false
                },
                {
                    name: 'Purchase',
                    selector: row => row.purchase_requisitions ? <Status key={row.id} requisition={row} type={'purchase'} /> : ''
                }
            ])
        }
    }, [data, isSuccess])


    const changeSearchParams = (key, value) => {
        setSearchParams({...searchParams , [key]: value, page: 1});
    }

    return (
        <AppLayout
            header={
                <h2 className="font-semibold text-xl text-gray-800 leading-tight">
                    Dashboard
                </h2>
            }>
            <Head>
                <title>{process.env.APP_NAME} - Dashboard</title>
            </Head>

            <div className="py-12">
                <div className="md:py-8 md:mx-16 mx-0 md:px-4 sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 bg-white border-b border-gray-200">
                            <Card>
                                <h2>Latest Requisition</h2>
                                <DataTable
                                    columns={initialColumns}
                                    data={data?.initial}
                                    progressPending={isLoading}
                                    pagination
                                    paginationServer
                                    responsive
                                    persistTableHead
                                    onChangePage={(page, totalRows) => setSearchParams({...searchParams, 'page': page})}
                                    onChangeRowsPerPage={(currentRowsPerPage, currentPage) => setSearchParams({...searchParams, 'page': currentPage, per_page: currentRowsPerPage })}
                                    paginationTotalRows={data?.number_of_rows}
                                />
                            </Card>

                        </div>
                    </div>
                </div>
            </div>
        </AppLayout>
    )
}

export default Dashboard
