import AppLayout from "@/components/Layouts/AppLayout";
import Head from "next/head";
import { Button, Card, Datepicker, TextInput } from "flowbite-react";
import NavLink from "@/components/navLink";
import moment from "moment/moment";
import { AiOutlineSearch } from "react-icons/ai";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import {
  useDeleteCashRequisitionMutation,
  useGetCashRequisitionQuery
} from "@/store/service/cash/Index";
import { toast } from "react-toastify";
import Actions from "@/components/actions";
import DataTable from "react-data-table-component";

const CashRequisition = () => {
  const router = useRouter();
  const [destroy, destroyResponse] = useDeleteCashRequisitionMutation();
  const [columns, setColumns] = useState([]);

  const [search, setSearch] = useState({});
  const {data, isLoading, isError, refetch} = useGetCashRequisitionQuery(search);

  useEffect(() => {
    if (!destroyResponse.isLoading && destroyResponse.isSuccess){
      toast.success('Requisition deleted.')
    }
  }, [destroyResponse])

  useEffect(() => {
    if (!isLoading && !isError && data){
      setColumns([
        {
          name: 'P.R.F. NO.',
          selector: row => row.prf_no,
          sortable: true,
        },
        {
          name: 'Total Cost',
          selector: row => parseFloat(row.total_cost).toLocaleString('bd'),
          sortable: true,
        },
        {
          name: 'Department',
          selector: row => row.department?.name,
          sortable: true,
        },
        {
          name: 'Generated By',
          selector: row => row.user?.name,
          sortable: true,
        },
        {
          name: 'Created at',
          selector: row => moment(row.created_at).format("Y-MM-DD mm:ss"),
          sortable: true,
        },
        {
          name: 'Actions',
          cell: (row) => <Actions
            itemId={row.id}
            edit={!moment(row.created_at).diff(moment(), 'days') > 1 ? `/cash-requisition/${row.id}/edit`: false}
            print={`/cash-requisition/${row.id}/print_view`}
            destroy={!moment(row.created_at).diff(moment(), 'days') > 1 ? destroy : false}
            progressing={destroyResponse.isLoading}
            permissionModule={`cash-requisitions`}
            item={row}
          />,
          ignoreRowClick: true,
        }
      ]);
    }
  }, [isLoading, isError, data]);

  const changeSearchInput = (e) => {
    setSearch({search: e.target.value})
    if (e.target.value){
      refetch();
    }
  }

  useEffect(() => {
    if (search.length){
      refetch();
    }
  }, [search]);

    return (
        <AppLayout
            header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">
              Cash Requisition.
            </h2>}>
            <Head>
                <title>Cash Requisitions</title>
            </Head>
          <div className="md:py-8 md:mx-16 mx-0 md:px-4 sm:px-6 lg:px-8">
            <Card>
              <div className="flex flex-row space-x-4 shadow-lg py-4 px-4">
                <NavLink
                  active={router.pathname === 'cash-requisition/create'}
                  href={`cash-requisition/create`}
                >
                  <Button>Create</Button>
                </NavLink>
                  <div className={`flex flex-row px-1 leading-5`}>
                      <div>
                          <Datepicker
                              onSelectedDateChanged={(date) => setSearch({...search, date: moment(date).format('Y-MM-DD')})}
                              datepicker-format="mm-yyyy"
                          />
                      </div>
                      <div>
                          <TextInput
                              icon={AiOutlineSearch}
                              onBlur={changeSearchInput}
                          />
                      </div>
                  </div>
              </div>
              <DataTable
                columns={columns}
                data={data?.data}
                pagination
                responsive
                progressPending={isLoading}
                persistTableHead
              />
            </Card>
          </div>
        </AppLayout>
    )
}

export default CashRequisition;
