import Head from "next/head";
import AppLayout from "@/components/Layouts/AppLayout";
import { wrapper } from "@/store";
import { Button, Card, Datepicker, TextInput } from "flowbite-react";
import DataTable from 'react-data-table-component';
import NavLink from "@/components/navLink";
import { useRouter } from "next/router";
import Actions from "@/components/actions";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import {
    getInitialRequisition, getRunningQueriesThunk, useCopyInitialRequisitionQuery,
    useDestroyInitialRequisitionMutation,
    useGetInitialRequisitionQuery
} from "@/store/service/requisitions/initial";
import {AiFillShopping, AiOutlineSearch} from 'react-icons/ai';
import moment from "moment";
import { useAuth } from "@/hooks/auth";

const InitialRequisition = () => {
    const { user } = useAuth()
    const router = useRouter();
    const [searchParams, setSearchParams] = useState({});
    const [destroy, destroyResponse] = useDestroyInitialRequisitionMutation();
    const [columns, setColumns] = useState([]);
    const [copyID, setCopyID] = useState(false);

    const {data, isLoading, isError, refetch} = useGetInitialRequisitionQuery(searchParams);
    const {data: copy, isLoading: copyISProgressing, isSuccess: copyISSuccess} = useCopyInitialRequisitionQuery(copyID, {
        skip: !copyID
    });

    useEffect(() => {
        if (copyISSuccess && !copyISProgressing){
            setCopyID(false);
            router.reload()
        }
    },[copyISSuccess, copy, copyISProgressing])

    useEffect(() => {
        if (!destroyResponse.isLoading && destroyResponse.isSuccess){
            toast.success('Requisition deleted.')
        }
    }, [destroyResponse])
    useEffect(() => {
        if (!isLoading && !isError && data && user){
            setColumns([
                {
                    name: 'I.R.F. No.',
                    selector: row => row.irf_no,
                    sortable: true,
                },
                {
                    name: 'Category',
                    selector: row => row.category,
                    sortable: true,
                    maxWidth: "200px",
                },
                {
                    name: 'No. of Item',
                    selector: row => row.no_of_item,
                    sortable: true,
                },
                {
                    name: 'Department',
                    selector: row => row.department?.name,
                    sortable: true,
                },
                {
                    name: 'Purchase Requisition',
                    selector: row => row.is_purchase_requisition_generated ? 'Generated' : 'No',
                    sortable: true,
                },
                {
                    name: 'Generated By',
                    selector: row => row.user?.name,
                    sortable: true,
                },
                {
                    name: 'Created at',
                    selector: row => row.created_at,
                    sortable: true,
                },
                {
                    name: 'Copy',
                    selector: row => <Button onClick={() => {
                        const cnrf= confirm('Are you aware that a new requisition is about to be initiated? Kindly confirm if you wish to proceed.');
                        if (cnrf){
                            setCopyID(row.id)
                        }
                    }}>Copy</Button>
                },
                {
                    name: 'Actions',
                    cell: (row) => <Actions
                        itemId={row.id}
                        edit={!row.is_purchase_requisition_generated ? `/initial-requisition/${row.id}/edit`: false}
                        print={`/initial-requisition/${row.id}/print_view`}
                        destroy={!row.is_purchase_requisition_generated ? destroy : false}
                        progressing={destroyResponse.isLoading}
                        permissionModule={`initial-requisitions`}
                        item={row}
                        view={!row.is_purchase_requisition_generated && (parseInt(row.department_id) === parseInt(user?.default_department_id) || user.role_names.includes('Store Manager')) ? (
                            <Button
                                gradientDuoTone="greenToBlue"
                                onClick={() => router.push(`/initial-requisition/${row.id}/create_purchase`)}>
                                <AiFillShopping />
                            </Button>
                        ) : false}
                    />,
                    ignoreRowClick: true,
                }
            ]);
        }
    }, [isLoading, isError, data, user]);

    const changeSearchParams = (key, value) => {
        setSearchParams({...searchParams , [key]: value, page: 1});
    }
    const conditionalRowStyles = [{
        when: row => row?.current_status?.status == 'Rejected',
        style: row => ({ backgroundColor:'#f5e6f1', boxShadow: '10px 10px red', textShadow: 'text-shadow: 2px 2px red' }),
    }];
    return (
        <>
            <Head>
                <title>Initial Requisition</title>
            </Head>
            <AppLayout
                header={
                    <h2 className="font-semibold text-xl text-gray-800 leading-tight">
                        Initial Requisition.
                    </h2>
                }
            >
                <Head>
                    <title>Initial Requisition.</title>
                </Head>
                <div className="md:py-8 md:mx-16 mx-0 md:px-4 sm:px-6 lg:px-8">
                    <Card>
                        <div className="flex flex-row space-x-4 space-y-4 shadow-lg py-4 px-4">
                            <NavLink
                                active={router.pathname === 'initial-requisition/create'}
                                href={`initial-requisition/create`}
                            >
                                <Button>Create</Button>
                            </NavLink>
                            <div>
                                <Datepicker
                                    onSelectedDateChanged={(date) => setSearchParams({search: searchParams.search, date: moment(date).format('Y-MM-DD')})}
                                />
                            </div>
                            <div>
                                <TextInput
                                    icon={AiOutlineSearch}
                                    onBlur={(e) => {
                                        setSearchParams({
                                            search: e.target.value,
                                            date: searchParams.date
                                        })
                                    }}
                                />
                            </div>
                        </div>
                        <DataTable
                            columns={columns}
                            data={data?.initial}
                            pagination
                            responsive
                            progressPending={isLoading}
                            persistTableHead
                            paginationServer
                            onChangePage={(page, totalRows) => setSearchParams({
                                ...searchParams,
                                'page': page
                            })}
                            onChangeRowsPerPage={(currentRowsPerPage, currentPage) => setSearchParams({
                                ...searchParams,
                                'page': currentPage,
                                per_page: currentRowsPerPage
                            })}
                            paginationTotalRows={data?.number_of_rows}
                            conditionalRowStyles={conditionalRowStyles}
                        />
                    </Card>
                </div>
            </AppLayout>
        </>
    )
}

export const getServerSideProps = wrapper.getServerSideProps((store) => async (context) => {
    // const params = context.params
    store.dispatch(getInitialRequisition.initiate())
    await Promise.all(store.dispatch(getRunningQueriesThunk()));
    return {
        props: {},
    };
})

export default InitialRequisition;
